document.addEventListener('DOMContentLoaded', () => {
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞ –†–∞—Ö–µ—Å
    const RACHES_LAT = 38.86;
    const RACHES_LON = 22.78;
    const SEA_TEMP_ASSUMPTION = 23; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –º–æ—Ä–µ—Ç–æ

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    const datePicker = flatpickr("#date-picker", {
        mode: "range",
        dateFormat: "Y-m-d",
        minDate: "today",
        maxDate: new Date().fp_incr(15) // –ü–æ–∑–≤–æ–ª—è–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ 16 –¥–Ω–∏ –Ω–∞–ø—Ä–µ–¥
    });

    const analyzeBtn = document.getElementById('analyze-btn');
    const resultsContainer = document.getElementById('results-container');
    
    resultsContainer.innerHTML = `<p class="placeholder">–ò–∑–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—Ç–∏—Å–Ω–µ—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π", –∑–∞ –¥–∞ –≤–∏–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞.</p>`;

    analyzeBtn.addEventListener('click', () => {
        const selectedDates = datePicker.selectedDates;
        if (selectedDates.length < 2) {
            alert("–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç –¥–∞—Ç–∏.");
            return;
        }

        const startDate = formatDate(selectedDates[0]);
        const endDate = formatDate(selectedDates[1]);
        
        fetchAndAnalyze(startDate, endDate);
    });

    // –§—É–Ω–∫—Ü–∏—è –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞
    function formatDate(date) {
        const d = new Date(date),
              year = d.getFullYear(),
              month = ('0' + (d.getMonth() + 1)).slice(-2),
              day = ('0' + d.getDate()).slice(-2);
        return [year, month, day].join('-');
    }

    // –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –≤–∑–∏–º–∞–Ω–µ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
    async function fetchAndAnalyze(startDate, endDate) {
        resultsContainer.innerHTML = `<p class="placeholder">–ó–∞—Ä–µ–∂–¥–∞–º –¥–∞–Ω–Ω–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–º... üß†</p>`;
        
        const apiUrl = `https://api.open-meteo.com/v1/forecast?latitude=${RACHES_LAT}&longitude=${RACHES_LON}&hourly=temperature_2m,cloudcover,windspeed_10m,winddirection_10m&start_date=${startDate}&end_date=${endDate}`;

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error('–ü—Ä–æ–±–ª–µ–º –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å API-—Ç–æ –∑–∞ –≤—Ä–µ–º–µ—Ç–æ.');
            }
            const data = await response.json();
            const analysisResults = processWeatherData(data);
            renderResults(analysisResults);
        } catch (error) {
            resultsContainer.innerHTML = `<p class="placeholder" style="color: red;">–ì—Ä–µ—à–∫–∞: ${error.message}</p>`;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç API
    function processWeatherData(data) {
        const dailyData = {};
        data.hourly.time.forEach((time, index) => {
            const date = time.split('T')[0];
            if (!dailyData[date]) {
                dailyData[date] = {
                    hours: [],
                    temps: [],
                    clouds: [],
                    windspeeds: [],
                    winddirs: []
                };
            }
            dailyData[date].hours.push(parseInt(time.split('T')[1].split(':')[0]));
            dailyData[date].temps.push(data.hourly.temperature_2m[index]);
            dailyData[date].clouds.push(data.hourly.cloudcover[index]);
            dailyData[date].windspeeds.push(data.hourly.windspeed_10m[index] * 0.54); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –æ—Ç km/h –≤ knots
            dailyData[date].winddirs.push(data.hourly.winddirection_10m[index]);
        });

        const analysis = {};
        for (const date in dailyData) {
            analysis[date] = analyzeDay(dailyData[date]);
        }
        return analysis;
    }

    // "AI –ê–≥–µ–Ω—Ç" - —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞, –∫–æ—è—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –¥–µ–Ω—è –ø–æ 5-—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏—è
    function analyzeDay(dayData) {
        const results = {
            criteria: [false, false, false, false, false],
            details: {}
        };

        // 1. –°–ª—ä–Ω—á–µ–≤–æ –∏ —è—Å–Ω–æ –Ω–µ–±–µ (–¥–æ –æ–±—è–¥)
        const morningClouds = dayData.clouds.slice(8, 14); // 8:00 - 13:00
        const avgMorningClouds = morningClouds.reduce((a, b) => a + b, 0) / morningClouds.length;
        if (avgMorningClouds < 25) { // –ü–æ–¥ 25% —Å—Ä–µ–¥–Ω–∞ –æ–±–ª–∞—á–Ω–æ—Å—Ç
            results.criteria[0] = true;
        }
        results.details.clouds = `–°—Ä–µ–¥–Ω–∞ —Å—É—Ç—Ä–µ—à–Ω–∞ –æ–±–ª–∞—á–Ω–æ—Å—Ç: ${avgMorningClouds.toFixed(0)}%`;

        // 2. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞ —Ä–∞–∑–ª–∏–∫–∞ —Å—É—à–∞-–º–æ—Ä–µ
        const maxTemp = Math.max(...dayData.temps);
        const tempDiff = maxTemp - SEA_TEMP_ASSUMPTION;
        if (tempDiff >= 6) { // –†–∞–∑–ª–∏–∫–∞ –æ—Ç 6+ –≥—Ä–∞–¥—É—Å–∞
            results.criteria[1] = true;
        }
        results.details.temp = `–ú–∞–∫—Å. —Ç–µ–º–ø. –Ω–∞ —Å—É—à–∞—Ç–∞: ${maxTemp.toFixed(1)}¬∞C. –†–∞–∑–ª–∏–∫–∞: ${tempDiff.toFixed(1)}¬∞C`;

        // 3. –°–ª–∞–±–∞ —Å–∏–Ω–æ–ø—Ç–∏—á–Ω–∞ —Ü–∏—Ä–∫—É–ª–∞—Ü–∏—è –æ—Ç ENE/NE
        const morningWindspeeds = dayData.windspeeds.slice(8, 13); // 8:00 - 12:00
        const morningWinddirs = dayData.winddirs.slice(8, 13);
        const avgMorningWindspeed = morningWindspeeds.reduce((a, b) => a + b, 0) / morningWindspeeds.length;
        const dominantMorningDir = morningWinddirs.filter(dir => dir >= 30 && dir <= 90).length > morningWinddirs.length / 2;
        if (avgMorningWindspeed >= 4 && avgMorningWindspeed <= 12 && dominantMorningDir) {
            results.criteria[2] = true;
        }
        results.details.synoptic = `–°—É—Ç—Ä–µ—à–µ–Ω –≤—è—Ç—ä—Ä: ~${avgMorningWindspeed.toFixed(0)} –≤—ä–∑–µ–ª–∞ –æ—Ç NE/ENE`;

        // 4. –ë–µ–∑ —Å–∏–ª–µ–Ω –∑–∞–ø–∞–¥–µ–Ω –∏–ª–∏ —é–∂–µ–Ω –≤—è—Ç—ä—Ä
        const afternoonWinddirs = dayData.winddirs.slice(14, 19);
        const hasOpposingWind = afternoonWinddirs.some(dir => dir >= 160 && dir <= 320);
        if (!hasOpposingWind) {
            results.criteria[3] = true;
        }
        results.details.opposing = hasOpposingWind ? "–ò–º–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–µ–Ω –≤—è—Ç—ä—Ä!" : "–ù—è–º–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–µ–Ω –≤—è—Ç—ä—Ä.";

        // 5. –ú–µ—Å—Ç–µ–Ω –µ—Ñ–µ–∫—Ç –Ω–∞ –∑–∞—Å–º—É–∫–≤–∞–Ω–µ
        const afternoonWindspeeds = dayData.windspeeds.slice(14, 18);
        const maxAfternoonWindspeed = Math.max(...afternoonWindspeeds);
        if (maxAfternoonWindspeed > avgMorningWindspeed + 5 && maxAfternoonWindspeed > 13) {
            results.criteria[4] = true;
        }
        results.details.suck_effect = `–ü–∏–∫ –Ω–∞ –≤—è—Ç—ä—Ä–∞ —Å–ª–µ–¥–æ–±–µ–¥: ${maxAfternoonWindspeed.toFixed(0)} –≤—ä–∑–µ–ª–∞.`;

        // –§–∏–Ω–∞–ª–Ω–∞ –æ—Ü–µ–Ω–∫–∞
        const score = results.criteria.filter(Boolean).length;
        if (score === 5) {
            results.finalForecast = "–í–ò–°–û–ö–ê –í–ï–†–û–Ø–¢–ù–û–°–¢";
            results.cssClass = "high";
        } else if (score >= 3) {
            results.finalForecast = "–°–†–ï–î–ù–ê –í–ï–†–û–Ø–¢–ù–û–°–¢";
            results.cssClass = "medium";
        } else {
            results.finalForecast = "–ù–ò–°–ö–ê –í–ï–†–û–Ø–¢–ù–û–°–¢";
            results.cssClass = "low";
        }

        return results;
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
    function renderResults(analysis) {
        resultsContainer.innerHTML = '';
        const sortedDates = Object.keys(analysis).sort();

        for (const date of sortedDates) {
            const result = analysis[date];
            const [year, month, day] = date.split('-');
            const formattedDate = `${day}.${month}.${year}`;

            const cardHTML = `
                <div class="forecast-card">
                    <h2>–ü—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ ${formattedDate}</h2>
                    <ul class="criteria-list">
                        <li>${result.criteria[0] ? '‚úÖ' : '‚ùå'} <span>1. –°–ª—ä–Ω—á–µ–≤–æ –Ω–µ–±–µ:</span> ${result.details.clouds}</li>
                        <li>${result.criteria[1] ? '‚úÖ' : '‚ùå'} <span>2. –¢–µ–º–ø. —Ä–∞–∑–ª–∏–∫–∞:</span> ${result.details.temp}</li>
                        <li>${result.criteria[2] ? '‚úÖ' : '‚ùå'} <span>3. –ü–æ—Å–æ–∫–∞ ENE/NE:</span> ${result.details.synoptic}</li>
                        <li>${result.criteria[3] ? '‚úÖ' : '‚ùå'} <span>4. –ë–µ–∑ W/SW –≤—è—Ç—ä—Ä:</span> ${result.details.opposing}</li>
                        <li>${result.criteria[4] ? '‚úÖ' : '‚ùå'} <span>5. –ï—Ñ–µ–∫—Ç "–∑–∞—Å–º—É–∫–≤–∞–Ω–µ":</span> ${result.details.suck_effect}</li>
                    </ul>
                    <div class="final-forecast ${result.cssClass}">
                        ${result.finalForecast}
                    </div>
                </div>
            `;
            resultsContainer.innerHTML += cardHTML;
        }
    }
});